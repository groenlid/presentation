# Node as a build-tool
or:
### How I learned to stop worrying and love the event-driven, non-blocking I/O build system

---
# Short bio

* Name: Mats Grønlid
* Title: Senior Consultant at Capgemini
* Current deployment: Digitizing the exam-process for BI Norwegian Business School.
* [http://github.com/groenlid](http://github.com/groenlid)

---

# Agenda

* Do we even need a build-tool?
* What does it give me?
* Node as a build-tool
* Some different tools
* How to use those tools efficiently to speed your development-cycle.
* How to minimize the number of bugs in your code as early as possible.
* How to be a better person (...... if there's time).
* How far can you go?

---

- My background is from the microsoft stack.
	- My perspective on node was something you build server-side application in. Web-api's.
	- Was using web essentials
- Why using node..
	- Why not <insert random language and buildsystem here>?
	- foreward looking.
	- build in javascript, by javascript-developers for javascript-developers.

---

# Chose a build system

* make
* ant
* rake
* jake
* brunch
* anvil
* mimosa
* simplebuild
* modjs
* Bud
* fez
* grunt
* gulp
* brocolli
* jzbuild
* train
* gear.js
* mimosa

---

What is node?
	- Chrome's javascript engine (V8).
	- Same javascript engine that's in Chrome.
	- Start up git bash.
		- 1 + 1 // 2
		- true + 1 // 2
		- typeof NaN
		-----
		- "foo" + "bar"
		- NaN === NaN
		- var i = parseInt("a")
			- typeof i
	- Can create scripts to run in node
	- Create file "hello.js"
		- var world = "goodbye cruel world";
		- console.log(world.toUpperCase());
	- node hello.js
	- Can build web-applications in node
	- Can run scripts => tools that other people write. <= We will be here through the presentation..

---

Package manager
	- Used to download these community-scripts.
	- Npm and Bower.

---

Task Runners
	- Lint,
	- Concat
	- Transpiling
		- Coffeescript -> javascript
		- ES6 -> ES5
	- Two different task runners
		- Grunt / Gulp
---

Generators
	- How to setup a project quickly.
---

NPM
	- Node comes with it's own built-inn package manager.
	- Very active community.
		- 80 567 packages and counting...
	- When installing using this, the libraries lands in one of two places
		- Locally under the current folder under "node_modules".
		- Globally accessable from anywhere.
	- Fetches the dependencies it should download from the package.json
		- When running npm install
		- Show package.json
			- Talk about the different attributes	 
Bower
	- Package manager for the client...

---

Grunt
	- The oldest/more mature than Grunt.
	- A task-runner
		- Fetch all the javascript files in this and all sub-directories and concatinate them. -> Results in a new file somewhere on the disk.
		- Run jslint/jshint on the last task's resulting file. 

Install grunt
	- npm install grunt-cli -g
	- npm install grunt -save-dev

---

# What does it give us?
	- Write in coffescript/typescript -> transpile to javascript
	- Precompile handlebars-templates for your SPA -> Ember Templates
	- Make sprites of all your images -> only one image is downloaded.
	- Sass/less -> css
	- jshint
	- optiomizers for require.js

* It gives us:
	* Performance - Network slow
	* Faster development
	* Minimize number of bugs in your code as early as possible.

---

Show it!
	- Open up sample gruntfile.js

	- grunt.initConfig({})
		- Here we specify the config variables for the different tasks.
	- grunt.loadNpmTasks('grunt-contrib-uglify');
		- Here we load the task-library 'grunt-contrib-uglify' from disk
	- grunt.registerTask('test', ['jshint', 'qunit']);
		- Here we make a new task called 'test' containing a sequence of tasks to run when called.

	- qunit -> unit-testing library from the jquery people
		- phantomjs

---



---

# Do we even need a build-tool..??

* If you're doing it more than once... You should automate it..

---

# Automate all the things
class: center, middle
![Center-aligned image](automation.png)

---

# Enter Node
![Center-aligned image](01-node.png)
* [http://nodejs.org/](http://nodejs.org/)

---

Negative:
* It is not integrated out of the box with most IDE's.
* Visual studio has added support for grunt.
* IntelliJ webstorm has
* Terminal get's minimized and forgotten
	- Growl grunt task for osx.
* Sublime plugin - https://sublime.wbond.net/packages/Grunt
* Grunt configs get big... fast...
	- Er mulig å 
--

![Center-aligned image](mind-blown-2.gif)

---

# Close to ideal development

--

### Developer writes some code on his machine
* The build-system watches the filesystem for changes.
* When a file changes
	* The changed files are transpiled (coffeescript -> js, typescript -> js, sass/less -> css)
	* The changed files are validated (jshint/jslint/scsslint/csslint)
	* The changed module/component are concatinated (concat)
* Unit-tests are run with phantom (qunit/jasmine/mocha)
* Live-reload is triggered (if you're into that sort of thing)

--

### Developer checks in code

---

traceur-compiler

http://github.com/google/traceur-compiler
ES6

```javascript
class Character {
  constructor(x, y) {
    this.x = x;
    this.y = y;
  }
}
```
```javascript
var square = (x) => {
  return x * x;
};

var square2 = x => x * x;

```